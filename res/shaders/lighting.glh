const float C1 = 0.429043;
const float C2 = 0.511664;
const float C3 = 0.743125;
const float C4 = 0.886227;
const float C5 = 0.247708;

const vec3 L00  = vec3( 0.7870665,  0.9379944,  0.9799986);
const vec3 L1m1 = vec3( 0.4376419,  0.5579443,  0.7024107);
const vec3 L10  = vec3(-0.1020717, -0.1824865, -0.2749662);
const vec3 L11  = vec3( 0.4543814,  0.3750162,  0.1968642);
const vec3 L2m2 = vec3( 0.1841687,  0.1396696,  0.0491580);
const vec3 L2m1 = vec3(-0.1417495, -0.2186370, -0.3132702);
const vec3 L20  = vec3(-0.3890121, -0.4033574, -0.3639718);
const vec3 L21  = vec3( 0.0872238,  0.0744587,  0.0353051);
const vec3 L22  = vec3( 0.6662600,  0.6706794,  0.5246173);

const int PCF_SAMPLES = 3;

bool getShadowMapCoords(vec3 worldPos, out vec4 coords) {
	for (uint cascade = 0; cascade < NUM_SHADOW_CASCADES; cascade++) {
		vec4 coords4 = rs.shadowMatrices[cascade] * vec4(worldPos, 1.0);
		if (abs(coords4.x) <= abs(coords4.w) && abs(coords4.y) <= abs(coords4.w) && abs(coords4.z) <= abs(coords4.w)) {
			vec3 coords3 = (coords4.xyz / coords4.w) * 0.5 + 0.5;
			coords = vec4(coords3.xy, cascade, coords3.z + 0.0001);
			return true;
		}
	}
	return false;
}

#ifndef NO_CALC_SHADOW
float calcShadow(vec3 worldPos) {
	vec4 coords;
	if (!getShadowMapCoords(worldPos, coords))
		return 0;
	
	const int sampleStart = PCF_SAMPLES / 2;
	float blur = 0.0;
	for (int x = -sampleStart; x <= sampleStart; x++) {
		for (int y = -sampleStart; y <= sampleStart; y++) {
			vec2 offset = vec2(x, y) / vec2(SHADOW_RES);
			blur += texture(shadowMap, coords + vec4(offset, 0, 0));
		}
	}
	return blur / (PCF_SAMPLES * PCF_SAMPLES);
}

vec3 calculateLighting(vec3 worldPos, vec3 normal, vec4 diffuseAndAo, float specIntensity, float specExponent) {
	vec3 irradiance = C1 * L22 * (normal.x * normal.x - normal.y * normal.y) +
	                  C3 * L20 * normal.z * normal.z +
	                  C4 * L00 -
	                  C5 * L20 +
	                  2.0 * C1 * L2m2 * normal.x * normal.y +
	                  2.0 * C1 * L21  * normal.x * normal.z +
	                  2.0 * C1 * L2m1 * normal.y * normal.z +
	                  2.0 * C2 * L11  * normal.x +
	                  2.0 * C2 * L1m1 * normal.y +
	                  2.0 * C2 * L10  * normal.z;
	
	vec3 litColor = irradiance * 0.1 * diffuseAndAo.a * diffuseAndAo.rgb;
	
	vec3 dirToEye = normalize(rs.cameraPos - worldPos);
	
	float sf = calcShadow(worldPos);
	if (sf > 0) {
		float diffuseFactor = max(dot(normal, -rs.sunDir), 0.0) * sf;
		vec3 hDir = normalize(dirToEye - rs.sunDir);
		float specFactor = pow(max(dot(normal, hDir), 0.0), specExponent);
		litColor += rs.sunColor * diffuseFactor * (diffuseAndAo.rgb + specIntensity * specFactor);
	}
	
	vec3 toPl = normalize(rs.plPosition - worldPos);
	float diffuseFactor = max(dot(normal, toPl), 0.0) / (distance(rs.plPosition, worldPos) * 0.05 + 1);
	vec3 hDir = normalize(dirToEye + toPl);
	float specFactor = pow(max(dot(normal, hDir), 0.0), specExponent);
	litColor += rs.plColor * diffuseFactor * (diffuseAndAo.rgb + specIntensity * specFactor);
	
	return litColor;
}
#endif
